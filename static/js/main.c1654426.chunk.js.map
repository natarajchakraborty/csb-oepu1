{"version":3,"sources":["App.js","index.js"],"names":["grid","App","useState","clickState","setClickState","winner","setWinner","clickCounts","setclickCounts","clicked","rowId","cellId","find","x","row","cell","Player","useEffect","col","i","rowEntries","filter","length","every","e","colEntries","firstDiagonalEntries","firstDiagonal","secondDiagonalEntries","secondDiagonal","winnerState","className","class","map","found","displaChar","onClick","idx","slice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c1654426.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nconst grid = [\n  [\"X\", \"X\", \"X\"],\n  [\"X\", \"X\", \"X\"],\n  [\"X\", \"X\", \"X\"]\n];\nexport default function App() {\n  const [clickState, setClickState] = useState([]);\n  const [winner, setWinner] = useState(-1);\n  const [clickCounts, setclickCounts] = useState(0);\n\n  const clicked = (rowId, cellId) => {\n    const found = clickState.find((x) => x.row === rowId && x.cell === cellId);\n    if (!found) {\n      setClickState([\n        ...clickState,\n        {\n          row: rowId,\n          cell: cellId,\n          clicked: true,\n          Player: (clickCounts + 1) % 2 === 0\n        }\n      ]);\n      setclickCounts(clickCounts + 1);\n    }\n  };\n\n  const restore = (idx) => {\n    setClickState(clickState.slice(0, idx + 1));\n    setWinner(false);\n    setclickCounts(clickState.slice(0, idx + 1).length);\n  };\n\n  const restart = () => {\n    setClickState([]);\n    setWinner(false);\n    setclickCounts(0);\n  };\n\n  useEffect(() => {\n    let row = false;\n    let col = false;\n    for (let i = 0; i < 3; i++) {\n      const rowEntries = clickState.filter((x) => x.row === i);\n\n      row =\n        row ||\n        (rowEntries.length === 3 &&\n          (rowEntries.every((e) => e.Player) ||\n            rowEntries.every((e) => !e.Player)));\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const colEntries = clickState.filter((x) => x.cell === i);\n\n      col =\n        col ||\n        (colEntries.length === 3 &&\n          (colEntries.every((e) => e.Player) ||\n            colEntries.every((e) => !e.Player)));\n    }\n\n    const firstDiagonalEntries = clickState.filter((x) => x.cell === x.row);\n    const firstDiagonal =\n      firstDiagonalEntries.length === 3 &&\n      (firstDiagonalEntries.every((e) => e.Player) ||\n        firstDiagonalEntries.every((e) => !e.Player));\n\n    const secondDiagonalEntries = clickState.filter(\n      (x) => x.cell + x.row === 2\n    );\n    const secondDiagonal =\n      secondDiagonalEntries.length === 3 &&\n      (secondDiagonalEntries.every((e) => e.Player) ||\n        secondDiagonalEntries.every((e) => !e.Player));\n\n    setWinner(row || col || firstDiagonal || secondDiagonal);\n  }, [clickState]);\n\n  let winnerState = \"None\";\n  if (clickState[clickState.length - 1]) {\n    winnerState = clickState[clickState.length - 1].Player ? \"Two\" : \"One\";\n  }\n\n  return (\n    <div className=\"App\">\n      <div class=\"winnner\">{winner ? \"Winner is \" + winnerState : \"\"}</div>\n      <div class=\"playerTurn\">\n        Player {clickCounts % 2 ? \"Two\" : \"One\"} turn\n      </div>\n      <div class=\"board\">\n        <div class=\"tictactoe\">\n          {grid.map((row, rowId) => {\n            return (\n              <div class=\"row\">\n                {row.map((e, cellId) => {\n                  const found = clickState.find(\n                    (x) => x.row === rowId && x.cell === cellId\n                  );\n                  if (found) {\n                    const displaChar =\n                      found.clicked && found.Player ? \"X\" : \"0\";\n                    return (\n                      <button\n                        class=\"cell\"\n                        onClick={() => clicked(rowId, cellId)}\n                      >\n                        {displaChar}\n                      </button>\n                    );\n                  } else {\n                    return (\n                      <button\n                        class=\"cell\"\n                        onClick={() => clicked(rowId, cellId)}\n                      >\n                        &middot;\n                      </button>\n                    );\n                  }\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <button class=\"restart\" onClick={() => restart()}>\n        Restart\n      </button>\n      <div class=\"state\">\n        {clickState.map((e, i) => {\n          return (\n            <button class=\"cell\" onClick={() => restore(i)}>\n              {i}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}